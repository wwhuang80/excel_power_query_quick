[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Excel PowerQuery Intro",
    "section": "",
    "text": "Relational Database (RDBMS)\n\nRelational model:\n\nDeveloped by Edgar F. Codd\nBased on the mathematical concept of relations\n\nSQL (Structured Query Language):\n\nInitially called SEQUEL (Structured English Query Language)\nBased on relational algebra\n\nExamples of RDBMS:\n\nOracle\nPostgres\nMySQL\n\n\nElements of modern RDBMS:\n\nTables (Tables): collection of relations\nColumns (Fields / Attributes): a variable (with the associated data type).\nRows (Record): a distinct collection of attributes\nPrimary Key: a column that contains a unique value for each record\nForeign Key: a column that references the primary key in another table\nIndex: additional data structure that associates an identifier with a row and/or a column (Excel row or column number)\n\n\n\n\n\n\nDeveloped to improve the efficiency of a database system.\n\n\nNo repeating groups of data. Separate repeating data into tables.\n\n\n\n\n\n\nStudent\nCollege\nMajor\nScore\n\n\n\n\n\nAlice\nL&S\nComputer Science\n60\n\n\n\nAlice\nL&S\nComputer Science\n70\n\n\n\nBob\nAg\nEconomics\n65\n\n\n\nCathy\nCBS\nBiology\n90\n\n\n\n\n\n=&gt;\n\n\n\n\nStudent\nTest\nScore\n\n\n\n\nAlice\nMidterm\n60\n\n\nAlice\nFinal\n70\n\n\nBob\nMidterm\n65\n\n\nCathy\nMidterm\n90\n\n\n\n\n\n\nStudent\nCollege\nMajor\n\n\n\n\nAlice\nL&S\nComputer Science\n\n\nBob\nAg\nEconomics\n\n\nCathy\nCBS\nBiology\n\n\n\n\n\n\nAll non-key columns are only dependent on the primary key.\n\n\n\n\n\n\nStudent\nCollege\nMajor\n\n\n\n\nAlice\nL&S\nComputer Science\n\n\nBob\nAg\nEconomics\n\n\nCathy\nCBS\nBiology\n\n\n\n\n→\n\n\n\n\nStudent\nMajor\n\n\n\n\nAlice\nComputer Science\n\n\nBob\nEconomics\n\n\nCathy\nBiology\n\n\n\n\n\n\nCollege\nMajor\n\n\n\n\nL&S\nComputer Science\n\n\nAg\nEconomics\n\n\nCBS\nBiology\n\n\n\n\n\n\nNo transitive dependence. If field A is dependent on B, and B is dependent on C, then one of the relations can be extracted into another table.\n\n\n\n\n\n\nStudent\nCollege\nMajor\nMajor Code\n\n\n\n\nAlice\nL&S\nComputer Science\nLCOM\n\n\nBob\nAg\nEconomics\nAECO\n\n\nCathy\nCBS\nBiology\nCBIO\n\n\n\n\n→\n\n\n\n\nStudent\nMajor Code\n\n\n\n\nAlice\nLCOM\n\n\nBob\nAECO\n\n\nCathy\nCBIO\n\n\n\n\n\n\nMajor\nMajor Code\n\n\n\n\nComputer Science\nLCOM\n\n\nEconomics\nAECO\n\n\nBiology\nCBIO\n\n\n\n\n\n\nCollege\nMajor\n\n\n\n\nL&S\nComputer Science\n\n\nAg\nEconomics\n\n\nCBS\nBiology\n\n\n\n\n\n\n\n\nAn influential article on how to structure data for statistical learning and analysis.\nWhat makes a dataset “tidy”:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyear\nartist\ntrack\ntime\ndate.entered\nwk1\nwk2\nwk3\n\n\n\n\n2000\n2 Pac\nBaby Don’t Cry\n4:22\n2000-02-26\n87\n82\n72\n\n\n2000\n2Ge+her\nThe Hardest Part Of …\n3:15\n2000-09-02\n91\n87\n92\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyear\nartist\ntime\ntrack\ndate\nweek\nrank\n\n\n\n\n2000\n2 Pac\n4:22\nBaby Don’t Cry\n2000-02-26\n1\n87\n\n\n2000\n2 Pac\n4:22\nBaby Don’t Cry\n2000-03-04\n2\n82\n\n\n2000\n2 Pac\n4:22\nBaby Don’t Cry\n2000-03-11\n3\n72\n\n\n2000\n2Ge+her\n3:15\nThe Hardest Part Of …\n2000-09-02\n1\n91\n\n\n2000\n2Ge+her\n3:15\nThe Hardest Part Of …\n2000-09-09\n2\n87\n\n\n2000\n2Ge+her\n3:15\nThe Hardest Part Of …\n2000-09-16\n3\n92"
  },
  {
    "objectID": "index.html#a-quick-review-of-relational-database",
    "href": "index.html#a-quick-review-of-relational-database",
    "title": "Excel PowerQuery Intro",
    "section": "",
    "text": "Relational Database (RDBMS)\n\nRelational model:\n\nDeveloped by Edgar F. Codd\nBased on the mathematical concept of relations\n\nSQL (Structured Query Language):\n\nInitially called SEQUEL (Structured English Query Language)\nBased on relational algebra\n\nExamples of RDBMS:\n\nOracle\nPostgres\nMySQL\n\n\nElements of modern RDBMS:\n\nTables (Tables): collection of relations\nColumns (Fields / Attributes): a variable (with the associated data type).\nRows (Record): a distinct collection of attributes\nPrimary Key: a column that contains a unique value for each record\nForeign Key: a column that references the primary key in another table\nIndex: additional data structure that associates an identifier with a row and/or a column (Excel row or column number)\n\n\n\n\n\n\nDeveloped to improve the efficiency of a database system.\n\n\nNo repeating groups of data. Separate repeating data into tables.\n\n\n\n\n\n\nStudent\nCollege\nMajor\nScore\n\n\n\n\n\nAlice\nL&S\nComputer Science\n60\n\n\n\nAlice\nL&S\nComputer Science\n70\n\n\n\nBob\nAg\nEconomics\n65\n\n\n\nCathy\nCBS\nBiology\n90\n\n\n\n\n\n=&gt;\n\n\n\n\nStudent\nTest\nScore\n\n\n\n\nAlice\nMidterm\n60\n\n\nAlice\nFinal\n70\n\n\nBob\nMidterm\n65\n\n\nCathy\nMidterm\n90\n\n\n\n\n\n\nStudent\nCollege\nMajor\n\n\n\n\nAlice\nL&S\nComputer Science\n\n\nBob\nAg\nEconomics\n\n\nCathy\nCBS\nBiology\n\n\n\n\n\n\nAll non-key columns are only dependent on the primary key.\n\n\n\n\n\n\nStudent\nCollege\nMajor\n\n\n\n\nAlice\nL&S\nComputer Science\n\n\nBob\nAg\nEconomics\n\n\nCathy\nCBS\nBiology\n\n\n\n\n→\n\n\n\n\nStudent\nMajor\n\n\n\n\nAlice\nComputer Science\n\n\nBob\nEconomics\n\n\nCathy\nBiology\n\n\n\n\n\n\nCollege\nMajor\n\n\n\n\nL&S\nComputer Science\n\n\nAg\nEconomics\n\n\nCBS\nBiology\n\n\n\n\n\n\nNo transitive dependence. If field A is dependent on B, and B is dependent on C, then one of the relations can be extracted into another table.\n\n\n\n\n\n\nStudent\nCollege\nMajor\nMajor Code\n\n\n\n\nAlice\nL&S\nComputer Science\nLCOM\n\n\nBob\nAg\nEconomics\nAECO\n\n\nCathy\nCBS\nBiology\nCBIO\n\n\n\n\n→\n\n\n\n\nStudent\nMajor Code\n\n\n\n\nAlice\nLCOM\n\n\nBob\nAECO\n\n\nCathy\nCBIO\n\n\n\n\n\n\nMajor\nMajor Code\n\n\n\n\nComputer Science\nLCOM\n\n\nEconomics\nAECO\n\n\nBiology\nCBIO\n\n\n\n\n\n\nCollege\nMajor\n\n\n\n\nL&S\nComputer Science\n\n\nAg\nEconomics\n\n\nCBS\nBiology\n\n\n\n\n\n\n\n\nAn influential article on how to structure data for statistical learning and analysis.\nWhat makes a dataset “tidy”:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyear\nartist\ntrack\ntime\ndate.entered\nwk1\nwk2\nwk3\n\n\n\n\n2000\n2 Pac\nBaby Don’t Cry\n4:22\n2000-02-26\n87\n82\n72\n\n\n2000\n2Ge+her\nThe Hardest Part Of …\n3:15\n2000-09-02\n91\n87\n92\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyear\nartist\ntime\ntrack\ndate\nweek\nrank\n\n\n\n\n2000\n2 Pac\n4:22\nBaby Don’t Cry\n2000-02-26\n1\n87\n\n\n2000\n2 Pac\n4:22\nBaby Don’t Cry\n2000-03-04\n2\n82\n\n\n2000\n2 Pac\n4:22\nBaby Don’t Cry\n2000-03-11\n3\n72\n\n\n2000\n2Ge+her\n3:15\nThe Hardest Part Of …\n2000-09-02\n1\n91\n\n\n2000\n2Ge+her\n3:15\nThe Hardest Part Of …\n2000-09-09\n2\n87\n\n\n2000\n2Ge+her\n3:15\nThe Hardest Part Of …\n2000-09-16\n3\n92"
  },
  {
    "objectID": "index.html#data-pipeline",
    "href": "index.html#data-pipeline",
    "title": "Excel PowerQuery Intro",
    "section": "Data pipeline",
    "text": "Data pipeline\n\n\n\n\n\n---\ntitle: Data Pipeline\n---\nflowchart TB\n    A[data entry] --&gt; D{data ingestion}\n    B[sensors] --&gt; D\n    C[applications] --&gt; D\n    D --&gt; E[\"data store\"]\n    E --&gt; F{Extract Transform Load}\n    F --&gt; G[analysis]\n    F --&gt; H[reports]\n    F --&gt; I[dashboards]\n    F --&gt; J[models]\n\n\n\n\n\n\n\n\nETL Extract, Transform, Load\n\nActions to transform data into Codd’s 3NF:\n\nCreate new tables by subsetting columns (SELECT) and remove duplicates (DISTINCT)\nUpdate the original columns by creating new foreign key columns (ADD COLUMN) and remove redundant columns\n\nActions to transform data from Codd’s 3NF:\n\nMerge (known as JOIN in relational algebra)\n\nTools for extracting and transforming data:\n\nSplitting columns\nCombining columns\nPivot (transform data from tall to wide)\nUnpivot (transform data from wide to tall)\nStack (create hierarchical index) [Not discussed here]\nUnstack (convert hierarchical index into columns) [Not discussed here]"
  },
  {
    "objectID": "index.html#using-powerquery-to-perform-etl",
    "href": "index.html#using-powerquery-to-perform-etl",
    "title": "Excel PowerQuery Intro",
    "section": "Using PowerQuery to perform ETL",
    "text": "Using PowerQuery to perform ETL\nQ: What is Power Query?\nA: Microsoft’s Data Connectivity and Data Preparation technology that lets you seamlessly access data stored in hundreds of sources and reshape it to fit your needs—all with an easy to use, engaging, no-code experience.\nQ: How does the query work?\nA: A query workflow (called an M Script) reads the data source and performs transformations on the data according to the query and loads the output.\n\n\n\n\n\nflowchart LR\n    A[M Script] ---&gt;|1.read| B[Power Query Engine]\n    B ---&gt;|2.requests| C[Data Source]\n    C ---&gt;|3.sends data| B\n    B ---&gt;|4.loads data| D[Output] \n\n\n\n\n\n\n\n\nA query (M Script) is reusable. (You can run the same query with updated source files to get updated results.)\nEach step of a query transformation is viewable for troubleshooting.\nThe query is portable. (Because it’s a documented workflow and not a sequence of user actions, it can be shared with others.)\nThe underlying M Script is available to check for correctness and reproducibility.\nCoding is not required.\nCoding can be done to perform more complex analysis.\n\n\nUsing Excel\n\nIt is recommended to use the latest version of Excel to access all the latest features. Download from office.ucdavis.edu.\nSample files for this reader are listed here:\n\nnames\ntransaction\npower_query_examples\n\n\n\n\nSourcing data\n\nData sources can be other Excel files, files, a database connection, or other data sources.\n\n\nHow to:\n\nGo to the Data tab.\nClick on the top left button Get Data (Power Query).\nChoose the data source. (For this example, import from Excel and connect to the source data file.)\nPromote headers if the first row of data contains headers. Otherwise, manually rename columns.\nTo change the Data Type of a column, click on the column and then click the Data Type button.\n\n\n\nKey buttons\n\nIn the Data ribbon, click on Queries & Connections to quickly see a list of queries.\n\n\n\n\nData ribbon\n\n\n\nRight-click on a query and click Edit to open the Power Query Editor, or click Load To to change the destination sheet for the query.\nIn the Power Query Editor, check the APPLIED STEPS to sequentially see how each transformation step is carried out.\nIn the Power Query Editor, click on Advanced Editor to see the M Script Code. The code can be copied/pasted as a quick way to share the query.\n\n\n\n\na screenshot of Power Query Editor\n\n\n\n\nBest practices\n\nAlways confirm column names, set data types for each columns. (Make sure to always set dollar values as Currency.)\nSet key columns as needed.\nPerform subsequent queries by referencing on the initial connection. Minimize the number of outside connections.\n\nIn the PowerQuery Editor, right-click on the query and create a reference.\n\n\n\n\nExample:\n\nLoad data from the names.xlsx file and from the transactions.xlsx file by using the Get Data button in the Data ribbon.\nCreate a reference to the initial query by right-clicking on the query and choose Reference. Avoid making multiple queries to the same source.\n\n\n\n\nData ribbon\n\n\n\n\n\nMerging tables (JOIN)\n\nPrimer on SQL JOIN (Wikipedia)\nPowerQuery References on Table.Join\nTo merge the names and transactions tables:\n\n\nSelect the left table (the first table selected is the left table)\nClick the Merge Queries button.\nSelect the second table to merge (this is the right table)\nSelect the index column to merge on.\nPress Ok.\nIf the merge results in a nested column, you can expand the nested column as needed by clicking on the button in the column name.\n\n\n\n\nPower Query Editor Home panel\n\n\n\nSome Types of Joins available\n\nFull Outer Join\n\n\n\n\n\n\nLeft Index\nLeft Value\n\n\n\n\nA\n10\n\n\nB\n20\n\n\nC\n30\n\n\n\n\n\n\nRight Index\nRight Value\n\n\n\n\nB\n200\n\n\nC\n300\n\n\nD\n400\n\n\n\n\n→\n\n\n\n\nIndex\nLeft Value\nRight Value\n\n\n\n\nA\n10\nnull\n\n\nB\n20\n200\n\n\nC\n30\n300\n\n\nD\nnull\n400\n\n\n\n\n\n\nInner Join\n\n\n\n\n\n\nLeft Index\nLeft Value\n\n\n\n\nA\n10\n\n\nB\n20\n\n\nC\n30\n\n\n\n\n\n\nRight Index\nRight Value\n\n\n\n\nB\n200\n\n\nC\n300\n\n\nD\n400\n\n\n\n\n→\n\n\n\n\nIndex\nLeft Value\nRight Value\n\n\n\n\nB\n20\n200\n\n\nC\n30\n300\n\n\n\n\n\n\nLeft Outer Join\n\n\n\n\n\n\nLeft Index\nLeft Value\n\n\n\n\nA\n10\n\n\nB\n20\n\n\nC\n30\n\n\n\n\n\n\nRight Index\nRight Value\n\n\n\n\nB\n200\n\n\nC\n300\n\n\nD\n400\n\n\n\n\n→\n\n\n\n\nIndex\nLeft Value\nRight Value\n\n\n\n\nA\n10\nnull\n\n\nB\n20\n200\n\n\nC\n30\n300\n\n\n\n\n\n\nLeft Anti Join\n\n\n\n\n\n\nLeft Index\nLeft Value\n\n\n\n\nA\n10\n\n\nB\n20\n\n\nC\n30\n\n\n\n\n\n\nRight Index\nRight Value\n\n\n\n\nB\n200\n\n\nC\n300\n\n\nD\n400\n\n\n\n\n→\n\n\n\n\nIndex\nLeft Value\n\n\n\n\nA\n10\n\n\n\n\n\n\n\nExample:\nTo merge the names and transactions tables:\n\nSelect the “names” table (the first table selected is the left table)\nClick the Merge Queries button.\nSelect the “transactions” table to merge (this is the right table)\nSelect the index column (use the Email column) to merge on.\nPress Ok.\nIf the merge results in a nested column, you can expand the nested column as needed by clicking on the button in the column name.\n\n\n\n\nFilter rows\n\nKeep or remove duplicates by clicking on the Keep Rows button or the Remove Rows button.\nFilter row by clicking on the filter button on the column name.\n\n\nExample:\n\nFilter out Alice by clicking the Email Column and unchecking “alice.wonderland@example.com”\n\n\n\n\nCombining, splitting columns, create new columns, and remove columns\n\nTo merge multiple columns\n\nselect the columns\nclick the Merge Columns button in the Transform panel.\n\nTo split a column:\n\nselect the column\nclick the Split Column button in the Transform panel.\n\nCreate new columns:\n\nConditional columns, in the Add Column panel, click the Conditional Column button, and fill out the condition.\nCustom Column: click the Custom Column button, and fill out the formula.\nThe Column From Examples tool can help with generating formulas, but it’s important to make sure that the formula is correct before proceeding.\n\nRemove columns:\n\nClick on the Choose Columns or Remove Columns button.\n\n\n\n\n\nPower Query Editor Transform panel\n\n\n\n\n\nPower Query Editor Add Column panel\n\n\n\nExample\n\nCombine the Last Name and the First Name by selecting both Columns and click the Merge Columns button.\nCreate new columns called Month and Year by selecting the Transaction Date column, then click the Date button, and then choose “Year” and “Month” respectively.\nSort the records by the Transaction Date and clicking the button on the column name and sort accordingly.\nRemove the Transaction Date column by selecting the column first, then clicking the *Remove Columns** button.\n\n\n\n\nAggregate data with GROUP BY\n\nIn the Transform Panel, click on the Group By button, choose the Advanced option, then add the columns to grouping (the order of grouping matters).\nFor aggregation, choose the New column name, the Operation to aggregate the data, and the Column the operation is performed on. It’s possible to aggregate on multiple columns.\nColumns not used in grouping or aggregation are dropped fro the output.\n\n\nExample:\n\nGroup the table by Name, Vendor, Month, Year, use “Transactions Amount Per Vendor” as the new column name, Sum as the Operation, and use “Transaction Amount” as the Column.\n\n\n\n\nPivot and Unpivot data\n\nSelect the column to pivot (change from tall to wide format), then click on the Pivot Column button. Choose the Values Column to use for the new columns. If aggregation is needed, click on the Advanced Options to aggregate the values.\n\n\nExample:\n\nSelect the Vendor column, then click on the Pivot Column button, use “Transactions Amount Per Vendor” as the Values Column, and Aggregate using Sum.\n\n\n\n\nCustom queries (Power Query M formula language)\nIn addition to all the button actions available (not all are covered here), you can create more complex queries by using the M Query Language directly.\n\nExample:\n\nAn example of a custom function called “GetRunningTotal” is included in the example file."
  },
  {
    "objectID": "index.html#exporting",
    "href": "index.html#exporting",
    "title": "Excel PowerQuery Intro",
    "section": "Exporting",
    "text": "Exporting\nThere are many ways to export the data, including:\n\nPower BI\nPower Pivot\nCopy/Paste to other documents."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "A quick introduction to Power Query"
  }
]